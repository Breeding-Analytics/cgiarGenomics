mt[,i] <- get_allelic_dosage(v, allele_count, ploidity)
alleles_str <- paste(names(allele_count), collapse = "/")
alleles_list <- c(alleles_list, alleles_str)
}
}
if (length(non_biallelic) > 0) {
bi_message <- paste0("From ", dim(mt)[2], "loci, ",
length(non_biallelic), " aren't bi-allelic")
# Remove non-biallelic and markers with missing data
non_biallelic <- c(non_biallelic, na_markers)
# Create the genlight object with the remaining markers
gl <- new("genlight",
mt[, -c(non_biallelic)],
ploidy = ploidity,
loc.names = loci[-c(non_biallelic)],
ind.names = individuals,
chromosome = meta_vcf[-c(non_biallelic), "CHROM"],
position = as.numeric(meta_vcf[-c(non_biallelic), "POS"]))
adegenet::alleles(gl) <- alleles_list
} else {
bi_message <- "Data confirmed bi-allelic"
# Create the genlight object with all markers
gl <- new("genlight",
mt,
ploidy = ploidity,
loc.names = loci[-c(na_markers)],
ind.names = individuals,
chromosome = meta_vcf[-c(na_markers), "CHROM"],
position = meta_vcf[-c(na_markers), "POS"])
adegenet::alleles(gl) <- alleles_list
}
print_log_message(bi_message)
return(list(gl = gl, alleles = alleles_list))
}
x <- read_vcf('./../bioflow/tmp.vcf.gz', ploidity = 4, na_reps = c('.'))
read_vcf <- function(path, ploidity = 2, na_reps = c()) {
# Read the VCF file
vcf <- vcfR::read.vcfR(path)
# Get the metadata from the VCF file
meta_vcf <- vcfR::getFIX(vcf)
# Extract the genotype data and transpose it (samples x snps)
mt <- t(vcfR::extract.gt(vcf, return.alleles = T))
# If there are any NA representations provided, replace them with NA
if (length(na_reps) > 0) {
idx <- which(mt %in% na_reps)
mt[idx] <- NA
}
# Remove markers where all samples have missing data
cols_to_remove <- colSums(is.na(mt)) == nrow(mt)
na_markers <- c(which(cols_to_remove))
if (length(na_markers) > 0) {
na_message <- paste0("From ", dim(mt)[2], "loci, ",
length(na_markers), " have complete missing data, removed.")
print_log_message(na_message)
mt <- mt[, !cols_to_remove]
}
# Create loci IDs from chromosome and position
loci <- paste0(meta_vcf[!cols_to_remove, "CHROM"], "_", meta_vcf[!cols_to_remove, "POS"])
individuals <- rownames(mt)
non_biallelic <- c()
alleles_list <- c()
for (i in 1:dim(mt)[2]) {
v1 <- mt[, i]
allele_count <- get_alleles_count_char(v1, ploidity = ploidity, sep = '/')
v <- paste(v1, collapse = " ")
v <- gsub('/', "", v)
v <- unlist(strsplit(v, " "))
# If the marker is not bi-allelic, add it to the non_biallelic vector
if (length(names(allele_count)) != 2) {
non_biallelic <- c(non_biallelic, i)
} else {
mt[,i] <- get_allelic_dosage(v, allele_count, ploidity)
alleles_str <- paste(names(allele_count), collapse = "/")
alleles_list <- c(alleles_list, alleles_str)
}
}
if (length(non_biallelic) > 0) {
bi_message <- paste0("From ", dim(mt)[2], "loci, ",
length(non_biallelic), " aren't bi-allelic")
# Remove non-biallelic and markers with missing data
non_biallelic <- c(non_biallelic, na_markers)
# Create the genlight object with the remaining markers
print(dim(mt))
print(length(loci[-c(non_biallelic)]))
print(length(meta_vcf[-c(non_biallelic), "CHROM"]))
gl <- new("genlight",
mt[, -c(non_biallelic)],
ploidy = ploidity,
loc.names = loci[-c(non_biallelic)],
ind.names = individuals,
chromosome = meta_vcf[-c(non_biallelic), "CHROM"],
position = as.numeric(meta_vcf[-c(non_biallelic), "POS"]))
adegenet::alleles(gl) <- alleles_list
} else {
bi_message <- "Data confirmed bi-allelic"
# Create the genlight object with all markers
gl <- new("genlight",
mt,
ploidy = ploidity,
loc.names = loci[-c(na_markers)],
ind.names = individuals,
chromosome = meta_vcf[-c(na_markers), "CHROM"],
position = meta_vcf[-c(na_markers), "POS"])
adegenet::alleles(gl) <- alleles_list
}
print_log_message(bi_message)
return(list(gl = gl, alleles = alleles_list))
}
x <- read_vcf('./../bioflow/tmp.vcf.gz', ploidity = 4, na_reps = c('.'))
2438 - 2443
read_vcf <- function(path, ploidity = 2, na_reps = c()) {
# Read the VCF file
vcf <- vcfR::read.vcfR(path)
# Get the metadata from the VCF file
meta_vcf <- vcfR::getFIX(vcf)
# Extract the genotype data and transpose it (samples x snps)
mt <- t(vcfR::extract.gt(vcf, return.alleles = T))
# If there are any NA representations provided, replace them with NA
if (length(na_reps) > 0) {
idx <- which(mt %in% na_reps)
mt[idx] <- NA
}
# Remove markers where all samples have missing data
cols_to_remove <- colSums(is.na(mt)) == nrow(mt)
na_markers <- c(which(cols_to_remove))
if (length(na_markers) > 0) {
na_message <- paste0("From ", dim(mt)[2], "loci, ",
length(na_markers), " have complete missing data, removed.")
print_log_message(na_message)
mt <- mt[, !cols_to_remove]
}
# Create loci IDs from chromosome and position
loci <- paste0(meta_vcf[!cols_to_remove, "CHROM"], "_", meta_vcf[!cols_to_remove, "POS"])
individuals <- rownames(mt)
non_biallelic <- c()
alleles_list <- c()
for (i in 1:dim(mt)[2]) {
v1 <- mt[, i]
allele_count <- get_alleles_count_char(v1, ploidity = ploidity, sep = '/')
v <- paste(v1, collapse = " ")
v <- gsub('/', "", v)
v <- unlist(strsplit(v, " "))
# If the marker is not bi-allelic, add it to the non_biallelic vector
if (length(names(allele_count)) != 2) {
non_biallelic <- c(non_biallelic, i)
} else {
mt[,i] <- get_allelic_dosage(v, allele_count, ploidity)
alleles_str <- paste(names(allele_count), collapse = "/")
alleles_list <- c(alleles_list, alleles_str)
}
}
if (length(non_biallelic) > 0) {
bi_message <- paste0("From ", dim(mt)[2], "loci, ",
length(non_biallelic), " aren't bi-allelic")
# Remove non-biallelic and markers with missing data
#non_biallelic <- c(non_biallelic, na_markers)
# Create the genlight object with the remaining markers
print(dim(mt))
print(length(loci[-c(non_biallelic)]))
print(length(meta_vcf[-c(non_biallelic), "CHROM"]))
gl <- new("genlight",
mt[, -c(non_biallelic)],
ploidy = ploidity,
loc.names = loci[-c(non_biallelic)],
ind.names = individuals,
chromosome = meta_vcf[-c(non_biallelic), "CHROM"],
position = as.numeric(meta_vcf[-c(non_biallelic), "POS"]))
adegenet::alleles(gl) <- alleles_list
} else {
bi_message <- "Data confirmed bi-allelic"
# Create the genlight object with all markers
gl <- new("genlight",
mt,
ploidy = ploidity,
loc.names = loci[-c(na_markers)],
ind.names = individuals,
chromosome = meta_vcf[-c(na_markers), "CHROM"],
position = meta_vcf[-c(na_markers), "POS"])
adegenet::alleles(gl) <- alleles_list
}
print_log_message(bi_message)
return(list(gl = gl, alleles = alleles_list))
}
x <- read_vcf('./../bioflow/tmp.vcf.gz', ploidity = 4, na_reps = c('.'))
vcf <- vcfR::read.vcfR('./tests/vcf_fmt/geno_pruned.vcf.gz')
fix <- vcfR::getFIX(vcf)
dim(fix)
read_vcf <- function(path, ploidity = 2, na_reps = c()) {
# Read the VCF file
vcf <- vcfR::read.vcfR(path)
# Get the metadata from the VCF file
meta_vcf <- vcfR::getFIX(vcf)
# Extract the genotype data and transpose it (samples x snps)
mt <- t(vcfR::extract.gt(vcf, return.alleles = T))
# If there are any NA representations provided, replace them with NA
if (length(na_reps) > 0) {
idx <- which(mt %in% na_reps)
mt[idx] <- NA
}
# Remove markers where all samples have missing data
cols_to_remove <- colSums(is.na(mt)) == nrow(mt)
na_markers <- c(which(cols_to_remove))
if (length(na_markers) > 0) {
na_message <- paste0("From ", dim(mt)[2], "loci, ",
length(na_markers), " have complete missing data, removed.")
print_log_message(na_message)
mt <- mt[, !cols_to_remove]
}
# Create loci IDs from chromosome and position
loci <- paste0([!cols_to_remove, "CHROM"], "_", meta_vcf[!cols_to_remove, "POS"])
read_vcf <- function(path, ploidity = 2, na_reps = c()) {
# Read the VCF file
vcf <- vcfR::read.vcfR(path)
# Get the metadata from the VCF file
meta_vcf <- vcfR::getFIX(vcf)
# Extract the genotype data and transpose it (samples x snps)
mt <- t(vcfR::extract.gt(vcf, return.alleles = T))
# If there are any NA representations provided, replace them with NA
if (length(na_reps) > 0) {
idx <- which(mt %in% na_reps)
mt[idx] <- NA
}
# Remove markers where all samples have missing data
cols_to_remove <- colSums(is.na(mt)) == nrow(mt)
na_markers <- c(which(cols_to_remove))
if (length(na_markers) > 0) {
na_message <- paste0("From ", dim(mt)[2], "loci, ",
length(na_markers), " have complete missing data, removed.")
print_log_message(na_message)
mt <- mt[, !cols_to_remove]
}
# Create loci IDs from chromosome and position
loci <- paste0(meta_vcf[!cols_to_remove, "CHROM"], "_", meta_vcf[!cols_to_remove, "POS"])
print(length(loci))
print(dim(meta_vcf))
individuals <- rownames(mt)
non_biallelic <- c()
alleles_list <- c()
for (i in 1:dim(mt)[2]) {
v1 <- mt[, i]
allele_count <- get_alleles_count_char(v1, ploidity = ploidity, sep = '/')
v <- paste(v1, collapse = " ")
v <- gsub('/', "", v)
v <- unlist(strsplit(v, " "))
# If the marker is not bi-allelic, add it to the non_biallelic vector
if (length(names(allele_count)) != 2) {
non_biallelic <- c(non_biallelic, i)
} else {
mt[,i] <- get_allelic_dosage(v, allele_count, ploidity)
alleles_str <- paste(names(allele_count), collapse = "/")
alleles_list <- c(alleles_list, alleles_str)
}
}
if (length(non_biallelic) > 0) {
bi_message <- paste0("From ", dim(mt)[2], "loci, ",
length(non_biallelic), " aren't bi-allelic")
# Remove non-biallelic and markers with missing data
#non_biallelic <- c(non_biallelic, na_markers)
# Create the genlight object with the remaining markers
print(dim(mt))
print(length(loci[-c(non_biallelic)]))
print(length(meta_vcf[-c(non_biallelic), "CHROM"]))
gl <- new("genlight",
mt[, -c(non_biallelic)],
ploidy = ploidity,
loc.names = loci[-c(non_biallelic)],
ind.names = individuals,
chromosome = meta_vcf[-c(non_biallelic), "CHROM"],
position = as.numeric(meta_vcf[-c(non_biallelic), "POS"]))
adegenet::alleles(gl) <- alleles_list
} else {
bi_message <- "Data confirmed bi-allelic"
# Create the genlight object with all markers
gl <- new("genlight",
mt,
ploidy = ploidity,
loc.names = loci[-c(na_markers)],
ind.names = individuals,
chromosome = meta_vcf[-c(na_markers), "CHROM"],
position = meta_vcf[-c(na_markers), "POS"])
adegenet::alleles(gl) <- alleles_list
}
print_log_message(bi_message)
return(list(gl = gl, alleles = alleles_list))
}
x <- read_vcf('./../bioflow/tmp.vcf.gz', ploidity = 4, na_reps = c('.'))
2503 - 2498
2498 - 55
read_vcf <- function(path, ploidity = 2, na_reps = c()) {
# Read the VCF file
vcf <- vcfR::read.vcfR(path)
# Get the metadata from the VCF file
meta_vcf <- vcfR::getFIX(vcf)
# Extract the genotype data and transpose it (samples x snps)
mt <- t(vcfR::extract.gt(vcf, return.alleles = T))
# If there are any NA representations provided, replace them with NA
if (length(na_reps) > 0) {
idx <- which(mt %in% na_reps)
mt[idx] <- NA
}
# Remove markers where all samples have missing data
cols_to_remove <- colSums(is.na(mt)) == nrow(mt)
na_markers <- c(which(cols_to_remove))
if (length(na_markers) > 0) {
na_message <- paste0("From ", dim(mt)[2], "loci, ",
length(na_markers), " have complete missing data, removed.")
print_log_message(na_message)
mt <- mt[, !cols_to_remove]
}
# Create loci IDs from chromosome and position
loci <- paste0(meta_vcf[!cols_to_remove, "CHROM"], "_", meta_vcf[!cols_to_remove, "POS"])
individuals <- rownames(mt)
non_biallelic <- c()
alleles_list <- c()
for (i in 1:dim(mt)[2]) {
v1 <- mt[, i]
allele_count <- get_alleles_count_char(v1, ploidity = ploidity, sep = '/')
v <- paste(v1, collapse = " ")
v <- gsub('/', "", v)
v <- unlist(strsplit(v, " "))
# If the marker is not bi-allelic, add it to the non_biallelic vector
if (length(names(allele_count)) != 2) {
non_biallelic <- c(i, non_biallelic)
} else {
mt[,i] <- get_allelic_dosage(v, allele_count, ploidity)
alleles_str <- paste(names(allele_count), collapse = "/")
alleles_list <- c(alleles_list, alleles_str)
}
}
if (length(non_biallelic) > 0) {
bi_message <- paste0("From ", dim(mt)[2], "loci, ",
length(non_biallelic), " aren't bi-allelic")
# Remove non-biallelic and markers with missing data
non_biallelic_na <- c(non_biallelic, na_markers)
# Create the genlight object with the remaining markers
gl <- new("genlight",
mt[, -c(non_biallelic)],
ploidy = ploidity,
loc.names = loci[-c(non_biallelic)],
ind.names = individuals,
chromosome = meta_vcf[-c(non_biallelic_na), "CHROM"],
position = as.numeric(meta_vcf[-c(non_biallelic_na), "POS"]))
adegenet::alleles(gl) <- alleles_list
} else {
bi_message <- "Data confirmed bi-allelic"
# Create the genlight object with all markers
gl <- new("genlight",
mt,
ploidy = ploidity,
loc.names = loci[-c(na_markers)],
ind.names = individuals,
chromosome = meta_vcf[-c(na_markers), "CHROM"],
position = meta_vcf[-c(na_markers), "POS"])
adegenet::alleles(gl) <- alleles_list
}
print_log_message(bi_message)
return(list(gl = gl, alleles = alleles_list))
}
x <- read_vcf('./../bioflow/tmp.vcf.gz', ploidity = 4, na_reps = c('.'))
alleles(x)
alleles(x$gl)
read_vcf <- function(path, ploidity = 2, na_reps = c()) {
# Read the VCF file
vcf <- vcfR::read.vcfR(path)
# Get the metadata from the VCF file
meta_vcf <- vcfR::getFIX(vcf)
# Extract the genotype data and transpose it (samples x snps)
mt <- t(vcfR::extract.gt(vcf, return.alleles = T))
# If there are any NA representations provided, replace them with NA
if (length(na_reps) > 0) {
idx <- which(mt %in% na_reps)
mt[idx] <- NA
}
# Remove markers where all samples have missing data
cols_to_remove <- colSums(is.na(mt)) == nrow(mt)
na_markers <- c(which(cols_to_remove))
if (length(na_markers) > 0) {
na_message <- paste0("From ", dim(mt)[2], "loci, ",
length(na_markers), " have complete missing data, removed.")
print_log_message(na_message)
mt <- mt[, !cols_to_remove]
}
# Create loci IDs from chromosome and position
loci <- paste0(meta_vcf[!cols_to_remove, "CHROM"], "_", meta_vcf[!cols_to_remove, "POS"])
individuals <- rownames(mt)
non_biallelic <- c()
alleles_list <- c()
for (i in 1:dim(mt)[2]) {
v1 <- mt[, i]
allele_count <- get_alleles_count_char(v1, ploidity = ploidity, sep = '/')
v <- paste(v1, collapse = " ")
v <- gsub('/', "", v)
v <- unlist(strsplit(v, " "))
# If the marker is not bi-allelic, add it to the non_biallelic vector
if (length(names(allele_count)) != 2) {
non_biallelic <- c(i, non_biallelic)
} else {
mt[,i] <- get_allelic_dosage(v, allele_count, ploidity)
alleles_str <- paste(names(allele_count), collapse = "/")
alleles_list <- c(alleles_list, alleles_str)
}
}
if (length(non_biallelic) > 0) {
bi_message <- paste0("From ", dim(mt)[2], "loci, ",
length(non_biallelic), " aren't bi-allelic")
# Remove non-biallelic and markers with missing data
non_biallelic_na <- c(non_biallelic, na_markers)
# Create the genlight object with the remaining markers
gl <- new("genlight",
mt[, -c(non_biallelic)],
ploidy = ploidity,
loc.names = loci[-c(non_biallelic)],
ind.names = individuals,
chromosome = meta_vcf[-c(non_biallelic_na), "CHROM"],
position = as.numeric(meta_vcf[-c(non_biallelic_na), "POS"]))
adegenet::alleles(gl) <- alleles_list
} else {
bi_message <- "Data confirmed bi-allelic"
# Create the genlight object with all markers
gl <- new("genlight",
mt,
ploidy = ploidity,
loc.names = loci[-c(na_markers)],
ind.names = individuals,
chromosome = meta_vcf[-c(na_markers), "CHROM"],
position = meta_vcf[-c(na_markers), "POS"])
adegenet::alleles(gl) <- alleles_list
}
print_log_message(bi_message)
return(gl)
}
gl <- read_hapmap('./tests/vcf_fmt/geno_pruned.vcf.gz', ploidity = 2)
gl <- read_vcf('./tests/vcf_fmt/geno_pruned.vcf.gz', ploidity = 2)
alleles(gl)
gl <- read_hapmap('./tests/hmp_fmt/geno_pruned_hmp.txt', ploidity = 2)
read_hapmap <- function(path, ploidity = 2, sep = "") {
# Read the genotype data from the tabular file
table <- read_tabular_geno(path)
# Define the expected column names for the hapmap file
hapmap_snp_attr <- c('rs#', 'alleles', 'chrom', 'pos', 'strand', 'assembly#',
'center', 'protLSID', 'assayLSID', 'panel', 'QCcode')
# Check if the first 11 columns in the input file match the expected column names
if (length(intersect(hapmap_snp_attr, colnames(table)[1:11])) != 11) {
print_log_message("Hapmap file doesn't have the standard column names")
stop()
}
nrows <- dim(table)[1]
ncols <- dim(table)[2]
individuals <- colnames(table)[12:ncols]
loci <- paste0(c(table[1:nrows, 3]), "_", c(table[1:nrows, 4]))
# Print a data integrity message
int_message <- paste0(
"Input data should have loci as rows and individuals as columns \n",
nrows - 1, " Loci, confirming first 5: \n",
paste(loci[1:5], collapse = " "), "\n",
ncols - length(hapmap_snp_attr), " Individuals, confirming first 5:\n",
paste(individuals[1:5], collapse = " ")
)
print_log_message(int_message)
# Check if individual labels and loci IDs are unique
if (length(unique(individuals)) != length(individuals)) {
cat(error("Fatal Error: Individual labels are not unique, check and edit your input file\n"))
stop()
}
if (length(unique(loci)) != length(loci)) {
cat(error("Fatal Error: loci not unique, check and edit your input file\n"))
stop()
}
# Read marker columns and transpose to obtain samples x snps
mt <- t(table[, c(12:dim(table)[2])])
alleles_list <- c()
non_biallelic <- c()
for (i in 1:dim(mt)[2]) {
v1 <- mt[, i]
allele_count = get_alleles_count_char(v1, ploidity)
if (length(names(allele_count)) != 2) {
non_biallelic <- c(i, non_biallelic)
} else {
l <- get_allelic_dosage(mt[,i], allele_count, ploidity)
mt[,i] <- get_allelic_dosage(mt[,i], allele_count, ploidity)
alleles_str <- paste(names(allele_count), collapse = "/")
alleles_list <- c(alleles_list,alleles_str)
}
}
if (length(non_biallelic) > 0) {
bi_message <- paste0("From ", nrows, "loci, ",
length(non_biallelic), " aren't bi-allelic")
gl <- new("genlight",
mt[, -c(non_biallelic)],
ploidy = ploidity,
loc.names = loci[-c(non_biallelic)],
ind.names = individuals,
chromosome = table[-c(non_biallelic), 3],
position = table[-c(non_biallelic), 4])
adegenet::alleles(gl) <- alleles_list
} else {
bi_message <- "Data confirmed bi-allelic"
gl <- new("genlight",
mt,
ploidy = ploidity,
loc.names = loci,
ind.names = individuals,
chromosome = table[1:nrows, 3],
position = table[1:nrows, 4])
adegenet::alleles(gl) <- alleles_list
}
print_log_message(bi_message)
return(gl)
}
gl <- read_hapmap('./tests/hmp_fmt/geno_pruned_hmp.txt', ploidity = 2)
gl
alleles(gl)
